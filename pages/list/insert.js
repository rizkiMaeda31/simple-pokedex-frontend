import Head from 'next/head'
import styles from '../../styles/Home.module.css'
import { useRouter } from 'next/router';
import { NewForm } from '../../components/form'
import { process_json } from '../../components/components'
import * as RB from 'react-bootstrap'
import { useState } from 'react'

export default function insert(props){
    const router = useRouter()
    const [tab, setTab]=useState("pokemon")
	// var props =JSON.parse(router.query.property)

    return(
        <div className={styles.container}>
            <Head>
                <title>Insert New Pokemon</title>
                <meta name="insert mode" content="Generated by simple pokedex" />
                <link rel="icon" href="/favicon.ico" />
				<link
					rel="stylesheet"
					href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
					integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"
					crossOrigin="anonymous"
				/>
            </Head>
            <main className={styles.main}>
                <RB.Tabs
                    activeKey={tab}
                    id="controlled-tab-example"
                    onSelect={(k) => setTab(k)}
                    className='mb-3'
                    fill
                >
                    <RB.Tab eventKey="pokemon" title="Pokemon">
                        <Pokemon />
                    </RB.Tab>
                    <RB.Tab eventKey="type" title="Type">
                        <Type />
                    </RB.Tab>
                    <RB.Tab eventKey="ability" title="Ability">
                        <Ability />
                    </RB.Tab>
                    <RB.Tab eventKey="detail" title="Pokemon Detail">
                        <Detail />
                        {/* <NewForm /> */}
                    </RB.Tab>
                </RB.Tabs>
                
            </main>
        </div>
    )
}

export const Pokemon=props=>{
    const [data, setData]=useState({
        name:'',
        img:'',
        hp:null,
        atk:null,
        def:null,
        satk:null,
        sdef:null,
        speed:null
    })
    const handleSubmit=e=>{
        e.preventDefault()
        var temp={
            name:e.target[0].value,
            hp:e.target[2].value,
            atk:e.target[3].value,
            def:e.target[4].value,
            satk:e.target[5].value,
            sdef:e.target[6].value,
            speed:e.target[7].value,
            img:e.target[1].value
        }
        console.log(temp)
    }
    return(
        <RB.Form onSubmit={handleSubmit} onReset={null}>

            <RB.Form.Group className="mb-3" controlId="form_pokemonname">
                <RB.Form.Label>Pokemon Name</RB.Form.Label>
                <RB.Form.Control type="text"
                defaultValue={data.name}
                name="name"
                placeholder="New Pokemon Name"></RB.Form.Control>
            </RB.Form.Group>

            <RB.Form.Group className="mb-3" controlId="form_img">
                <RB.Form.Label>Image address from raw.githubusercontent.com/PokeAPI</RB.Form.Label>
                <RB.Form.Control 
                    placeholder="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/example.png"
                    defaultValue={data.img}
                    name="img"
                />
            </RB.Form.Group>

            <RB.Row className="mb-3">
                <RB.Form.Group as={RB.Col} controlId="form_hp">
                    <RB.Form.Label>HP</RB.Form.Label>
                    <RB.Form.Control type="number" defaultValue={data.hp} name="hp" min={0}
                placeholder="HP"/>
                </RB.Form.Group>

                <RB.Form.Group as={RB.Col} controlId="form_atk">
                    <RB.Form.Label>Attack</RB.Form.Label>
                    <RB.Form.Control type="number" defaultValue={data.atk} name="atk" min={0}
                placeholder="Attack"/>
                </RB.Form.Group>

                <RB.Form.Group as={RB.Col} controlId="form_def">
                    <RB.Form.Label>Defense</RB.Form.Label>
                    <RB.Form.Control type="number" defaultValue={data.def} name="def" min={0}
                placeholder="Defense" />
                </RB.Form.Group>
            </RB.Row>

            <RB.Row className="mb-3">
                <RB.Form.Group as={RB.Col} controlId="form_satk">
                    <RB.Form.Label>Special Attack</RB.Form.Label>
                    <RB.Form.Control type="number" defaultValue={data.satk} name="satk" min={0}
                placeholder="Special Attack" />
                </RB.Form.Group>

                <RB.Form.Group as={RB.Col} controlId="form_sdef">
                    <RB.Form.Label>Special Defense</RB.Form.Label>
                    <RB.Form.Control type="number" defaultValue={data.sdef} name="sdef" min={0}
                placeholder="Special Defense" />
                </RB.Form.Group>

                <RB.Form.Group as={RB.Col} controlId="form_speed">
                    <RB.Form.Label>Speed</RB.Form.Label>
                    <RB.Form.Control type="number" defaultValue={data.speed} name="speed" min={0}
                placeholder="Speed" />
                </RB.Form.Group>
            </RB.Row>

            <RB.ButtonToolbar aria-label="Toolbar btngroup">
                <RB.ButtonGroup className="me-2">
                    <RB.Button variant="primary" type="submit" name="submit">Submit</RB.Button>
                </RB.ButtonGroup >
                <RB.ButtonGroup className="me-2">
                    <RB.Button variant="primary" type="reset" name="reset">Reset</RB.Button>
                </RB.ButtonGroup >
            </RB.ButtonToolbar>
        </RB.Form>
    )
}

export const Type=props=>{
    const [name, setName]=useState('')
    const handleSubmit=e=>{
        e.preventDefault()
        var temp={
            name:e.target[0].value
        }
        console.log(temp)
    }
    return(
        <RB.Form onSubmit={handleSubmit} onReset={null}>

            <RB.Form.Group className="mb-3" controlId="form_type">
                <RB.Form.Label>Type</RB.Form.Label>
                <RB.Form.Control type="text"
                defaultValue={name}
                name="name"
                placeholder="Example fire, water or grass"></RB.Form.Control>
            </RB.Form.Group>

            <RB.ButtonToolbar aria-label="Toolbar btngroup">
                <RB.ButtonGroup className="me-2">
                    <RB.Button variant="primary" type="submit" name="submit">Submit</RB.Button>
                </RB.ButtonGroup >
                <RB.ButtonGroup className="me-2">
                    <RB.Button variant="primary" type="reset" name="reset">Reset</RB.Button>
                </RB.ButtonGroup >
            </RB.ButtonToolbar>
        </RB.Form>
    )
}
export const Ability=props=>{
    const [data, setData]=useState({
        name:'',
        flavor_text:''
    })
    const handleSubmit=e=>{
        e.preventDefault()
        var temp={
            name:e.target[0].value,
            flavor_text:e.target[1].value,
        }
        console.log(temp)
    }
    return(
        <RB.Form onSubmit={handleSubmit} onReset={null}>

            <RB.Form.Group className="mb-3" controlId="form_ability">
                <RB.Form.Label>Ability</RB.Form.Label>
                <RB.Form.Control type="text"
                defaultValue={data.name} placeholder='New Ability Name'
                name="name"></RB.Form.Control>
            </RB.Form.Group>
            <RB.Form.Group className="mb-3" controlId="form_flavortext">
                <RB.Form.Label>Flavor Text</RB.Form.Label>
                <RB.Form.Control type="text" placeholder='This ability can do something'
                defaultValue={data.flavor_text}
                name="flavor_text"></RB.Form.Control>
            </RB.Form.Group>

            <RB.ButtonToolbar aria-label="Toolbar btngroup">
                <RB.ButtonGroup className="me-2">
                    <RB.Button variant="primary" type="submit" name="submit">Submit</RB.Button>
                </RB.ButtonGroup >
                <RB.ButtonGroup className="me-2">
                    <RB.Button variant="primary" type="reset" name="reset">Reset</RB.Button>
                </RB.ButtonGroup >
            </RB.ButtonToolbar>
        </RB.Form>
    )
}

export const Detail=props=>{
    const [data, setData]=useState({
        name:'',
        type:[],
        aiblity:[]
    })
    const handleSubmit=e=>{
        e.preventDefault()
        var temp={
            name:e.target[0].value
        }
        console.log(temp)
    }
    return(
        <RB.Form onSubmit={null} onReset={null}>
            <RB.Form.Group className="mb-3" controlId="form_ability">
                <RB.Form.Label>Ability</RB.Form.Label>
                <RB.Form.Control type="text"
                defaultValue={data.name} placeholder='New Ability Name'
                name="name"></RB.Form.Control>
            </RB.Form.Group>
            <RB.ButtonToolbar aria-label="Toolbar btngroup">
                <RB.ButtonGroup className="me-2">
                    <RB.Button variant="primary" type="submit" name="submit">Submit</RB.Button>
                </RB.ButtonGroup >
                <RB.ButtonGroup className="me-2">
                    <RB.Button variant="primary" type="reset" name="reset">Reset</RB.Button>
                </RB.ButtonGroup >
            </RB.ButtonToolbar>
        </RB.Form>
    )
}

export async function getServerSideProps() {
    // const res = await fetch('http://127.0.0.1:1337/api/pokemoncount').catch((err) => console.log(err));
    // let d = await res.json()
    // const pokemoncount = d.data.attributes.count
    const populate=`populate[0]=detail.types&populate[2]=detail.pokemon_name&populate[3]=detail.pokemon_abilities&pagination[page]=1&pagination[pageSize]=25`
    const filter=`&filters[status][$eq]=true`
    const res1 = await fetch('http://127.0.0.1:1337/api/c3s?'+populate+filter).catch((err) => console.log(err));
    let d1 = await res1.json()
    let arr = process_json(d1.data)
    let pagination=null
    try{
        pagination=d1.meta.pagination
    }
    catch(e){
        console.log("pagination",e)
    }
    return {
        props: {
            // count: pokemoncount||null,
            // data: arr||null,
            // pagination: pagination||null,
            // currentPage:1
            //count: pokemoncount,
            //data: null,
            //pagination: null,
            //currentPage:1
        }
    }
}