import { useRouter } from 'next/router';
import { redirect } from 'next/navigation'
import React, { useState, useCallback, useEffect } from 'react'
import { NavBar } from '../../components/mynavbar'
import { PokemonDataDetail } from '../../components/components'
// import { Tabs } from '@geist-ui/core'
import {Tab, Tabs} from 'react-bootstrap/'
import styles from '../../styles/Home.module.css'
import Head from 'next/head'
import * as Form from '../../components/form'
import { Cookies, CookiesProvider } from 'react-cookie'

export default function singlePage (props) {
	const router = useRouter()
	const cookies=new Cookies()
	console.log("router", router.query)
	const [user,setUser]=useState({
        name:router.query.name,
        status:router.query.status,
        token:router.query.token
    })
	
	// console.log("router", router.params)
	// console.log("names",props.pokemon_names)
	// console.log("types",props.pokemon_types)
	// console.log("abilities", props.abilities)
	const [role, setRole]=useState('')
	const [name,setName]=useState('')
	useEffect(()=>{
		try {
			setRole(cookies.get('user').role)
			setName(cookies.get('user').username)
		} catch (error) {
			console.log('setrole error', error)
			setRole('')
		}
	},[])
	const [key, setKey] = useState("data")
	
	const head=<Head>
					<title>{props.data.pokemon.name}</title>
					<meta name="description" content="Generated by simple pokedex" />
					<link rel="icon" href="/favicon.ico" />
					<link
						rel="stylesheet"
						href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
						integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"
						crossOrigin="anonymous"
					/>
				</Head>
	const tabs=<Tabs
					id="controlled-tab"
					activeKey={key}
					onSelect={(k) => setKey(k)}
					className="mb-3"
					// justify
					fill
				>
				<Tab eventKey="data" title="Data">
					<PokemonDataDetail obj={props.data} status={user.status}/>
				</Tab>
				<Tab eventKey="edit" title="Edit Mode"
				 disabled={role == 'pokemon master'||role == 'pokemon editor'? false:true}
				>
					<Form.EditForm data={props.data} abilities={props.abilities} types={props.pokemon_types} names={props.pokemon_names}/>
				</Tab>
				<Tab eventKey="delete" title="Delete Mode" 
					disabled={role == 'pokemon master'? false:true}>
					<Form.DeleteForm></Form.DeleteForm>
				</Tab>
				</Tabs>
	return (
		<div className={styles.container}>
			{head}
			<main className={styles.main}>
				<NavBar data={['Home', 'Pokemon']}/>
				{name!=''?<h6>Hey, {name}!</h6>:''}
				{tabs}
			</main>
		</div>
	)
}

// export function EditForm(){

// 	return(
// 		<>
// 		</>
// 	)
// }

export async function getServerSideProps(context) {

	// const router = useRouter()
	// var id = router.query.id
	// console.log("clear")
	// console.log("Res:",context.query.id)
	// console.log("Context", context)
	// console.log("end of context")
	const id = context.params.id
	const populate=`populate[0]=detail.types&populate[2]=detail.pokemon_name&populate[3]=detail.pokemon_abilities`
	const filter=`&filters[status][$eq]=true`
	const baseLink=`http://127.0.0.1:1337/api/`
	var pagination=`?pagination[page]=1&pagination[pageSize]=1000`

	var data= await fetch(baseLink+`c3s/`+id+`?`+ populate + filter).catch(e => {console.log("error c3s",e)})
	var res=await data.json()
	const c3s=process_json(res.data)
	
	data=await fetch(baseLink+`pokemon-abilities/`+pagination).catch(e => {console.log("error pokemon-abilities",e)})
	res=await data.json()
	// abilities=process_json(res.data)
	// console.log("abilities raw",res.data)
	const abilities=res.data.map((d)=>{
		return {
			id:d.id,
			name:d.attributes.name,
			flavor_text:d.attributes.flavor_text
		}
	})
	// console.log("raw",abilities)
	data=await fetch(baseLink+`pokemon-names`+pagination).catch(e => {console.log("error pokemon-names",e)})
	res=await data.json()
	const names=res.data.map((d)=>{
		return {
			id:d.id,
			name:d.attributes.name
			,
			img:d.attributes.img,
			stats:{
				hp:d.attributes.hp,
				atk:d.attributes.atk,
				def:d.attributes.def,
				satk:d.attributes.satk,
				sdef:d.attributes.sdef,
				speed:d.attributes.speed
			}
		}
	})

	pagination=`?pagination[page]=1&pagination[pageSize]=30`
	data=await fetch(baseLink+`types`+pagination).catch(e => {console.log("error pokemon-types",e)})
	res=await data.json()
	const types=res.data.map((d)=>{
		return {
			id:d.id,
			name:d.attributes.name
		}
	})
	
	// if (res.status == 200) {
	// 	console.log("res in fetchtodo", res)
	// 	let d = await res.json()
	// 	console.log("enter fetchtodo", d.data)
		
	// 	// console.log("props",props)
	// 	const cleanData = process_json(d.data)
	// 	console.log("cleandata", cleanData)
	// }
	// console.log("c3s", c3s)
	// console.log("names", names)
	// console.log("abilities", abilities)
	// console.log("types", types)
	return {
        props: {
            data:c3s,
			abilities:abilities,
			pokemon_names:names,
			pokemon_types:types
        }
    }
}

function process_json(data) {
    const temp = {
        //key:i.id,
        id: data.id,
        pokemon: {
            id: data.attributes.detail.pokemon_name.data.id,
            name: data.attributes.detail.pokemon_name.data.attributes.name,
            img: data.attributes.detail.pokemon_name.data.attributes.img
        },
        types: data.attributes.detail.types.data.map((type) => ({
            id: type.id,
            name: type.attributes.name
        })),
        stats: {
            hp: data.attributes.detail.pokemon_name.data.attributes.hp,
            atk: data.attributes.detail.pokemon_name.data.attributes.atk,
            def: data.attributes.detail.pokemon_name.data.attributes.def,
            satk: data.attributes.detail.pokemon_name.data.attributes.satk,
            sdef: data.attributes.detail.pokemon_name.data.attributes.sdef,
            speed: data.attributes.detail.pokemon_name.data.attributes.speed
        },
        abilities: data.attributes.detail.pokemon_abilities.data.map((ability) => ({
            id: ability.id,
            name: ability.attributes.name,
            flavor_text: ability.attributes.flavor_text
        }))
    }
    return temp
}